#server.port=8081

#Disable Thymeleaf Template Caching
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=file:src/main/resources/templates/

#Connection to the H2 DB
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

#Enable/h2-consoleendpoint
#spring.h2.console.enabled=true

#Connection to MySQL DB
spring.datasource.url=jdbc:mysql://localhost:3306/ticketingsystem?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=1234
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect

#Show and format the SQL auto-generated by Hibernate
#spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#This option disables the hbm2ddl.auto tool, so Hibernate is not going to take any action for managing the underlying database schema.
#Used this because Hibernate was overriding the tables created from schema.sql
spring.jpa.hibernate.ddl-auto=none

# The issue is that JPA is trying to perform the validations previously defined while doing the DB saving.
# This was a problem because we are hashing the password before persisting it. Meaning that JPA would compare the hashed psw
# with the field confirm password, and they are obviously different.
# Also, we have already done validations inside our UI and Controller layer.
# So to fix this issue we need to mention the below property inside application.properties.
spring.jpa.properties.javax.persistence.validation.mode=none